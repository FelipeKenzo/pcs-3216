Listing for source file "./filesystem/loader.asm".
Note: memory is Little-Endian.

000 00 06             JP   START    ; Jumps data area to first instruction
002 00       COUNTER  CON  $00      ; Counts number of bytes of data to be read
003 01           ONE  CON  $01      ; 1 constant
004 90        OPCODE  CON  $90      ; MM opcode value
005 00          ZERO  CON  $00      ; 0 constant
006 D0 00      START  GD            ; Reads first address byte from file
008 40 04             ADD  OPCODE   ; Adds upper address to opcode
00A 90 26             MM   WRITE_1  ; Writes result to write_1
00C 50 04             SUB  OPCODE   ; Subtracts MM opcode
00E 10 1A             JZ   ZERO_1   ; If equals to zero, we jump to zero_1 and continue to read the address
010 D0 00             GD            ; Reads second address byte from file
012 90 27             MM   WRITE_2  ; Writes to write_2
014 D0 00   READSIZE  GD            ; Reads byte count from file
016 90 02             MM   COUNTER  ; Writes byte count to counter
018 00 24             JP   LOOP     ; Jumps to memory write loop.
01A D0 00     ZERO_1  GD            ; Reads second byte from file
01C 10 22             JZ   ZERO_2   ; If also zero, we reached end of program, halt loader.
01E 90 27             MM   WRITE_2  ; Writes to write_2
020 00 14             JP   READSIZE ; goes back to reading 
022 C0 00     ZERO_2  HM   $000     ; Halts machine, end of program.
024 D0 00       LOOP  GD            ; Reads a byte of data
026 90       WRITE_1  CON  $90      ; MM first byte (will be read as instruction)
027 00       WRITE_2  CON  $00      ; MM second byte (will be read as instruction)
028 80 27             LD   WRITE_2  ; Loads MM second byte (lower address byte)
02A 40 03             ADD  ONE      ; write_2 += 1
02C 90 27             MM   WRITE_2  ; Writes new lower address byte
02E 10 3A             JZ   ADDUPPER ; jumps to addUpper (adds one to upper address byte)  
030 80 02    WRITE_3  LD   COUNTER  ; Loads value from counter
032 50 03             SUB  ONE      ; Counter--
034 90 02             MM   COUNTER  ; Writes new value of counter
036 10 06             JZ   START    ; Goes back to start if counter = 0
038 00 24             JP   LOOP     ; Goes back to loop if counter != 0
03A 80 26   ADDUPPER  LD   WRITE_1  ; Loads upper MM byte
03C 40 03             ADD  ONE      ; Write_1++
03E 90 26             MM   WRITE_1  ; Writes result
040 00 30             JP   WRITE_3  ; Returns to loop  
